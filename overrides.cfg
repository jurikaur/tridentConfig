############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------

# [include macros/calibration/test_speed.cfg]

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
# [gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "action1", "action2", ...
# gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
### Phaetus Dragon HF
# [extruder]
# control: pid
# pid_kp: 31.550
# pid_ki: 2.446
# pid_kd: 101.74

### Mosquito Magnum
[extruder]
control: pid
pid_Kp=24.644
pid_Ki=1.507
pid_Kd=100.732

[heater_bed]
control: pid
pid_kp: 54.017
pid_ki: 2.484
pid_kd: 293.719


#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z]
dir_pin: !Z_DIR

[stepper_z1]
dir_pin: !Z1_DIR

[stepper_z2]
dir_pin: !Z2_DIR

#-------------------------#
#   XY SENSORLESS         #
#-------------------------#

[tmc2209 stepper_x]
driver_SGTHRS: 140
#run_current: 0.85

[tmc2209 stepper_y]
driver_SGTHRS: 140
#run_current: 0.85


#-------------------------#
#   Extruder config       #
#-------------------------#

[extruder]
# microsteps: 32
# full_steps_per_rotation: 200
dir_pin: toolhead:E_DIR
# rotation_distance: 34.9364052589266  # Re-calibrate your own value
# gear_ratio: 44:10, 37:17
# rotation_distance: 4.637 #if gearratio 7.5:1 enabled rotation_distance: 34.96298
nozzle_diameter: 0.400                              #define nozzle diameter
# filament_diameter: 1.750
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
# pressure_advance: 0.03                         #to be calibrated
# pressure_advance_smooth_time: 0.03  #to be calibrated
### tavaline thermistor
#sensor_pin: toolhead:E_TEMPERATURE
max_temp: 330

sensor_type:MAX31865
sensor_pin: toolhead: MCU_SPI1_CS
spi_bus: spi1
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

[tmc2209 extruder]
run_current: 0.55
### Orbiter2.0 motor settings###
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

#-------------------------------#
#   tap probe parameters        #
#-------------------------------#

[probe]
pin: toolhead:X_STOP
#z_offset: -1.070
#z_offset: -1.100 #kuni 13.09(printerit sai tõstetud)
#z_offset: -1.130 #eelmine väärtuskuni 31.08.2023
z_offset: -1.170
#z_offset: -1.420 muudetud varem
speed: 5
sample_retract_dist: 1.0
samples_tolerance: 0.006
lift_speed: 5

#[settling_probe]
#settling_sample: True

#-------------------------------#
#        z-tilt parameters          #
#-------------------------------#

[z_tilt]
points:
   10, 10
   150, 290
   290, 10
speed: 200
horizontal_move_z: 10
retries: 10

#-------------------------------#
#   printer parameters          #
#-------------------------------#

[printer]
max_velocity: 300
max_accel: 10000
max_z_velocity: 10
max_z_accel: 250

#-------------------------------#
#    Chamber temperature fan    #
#-------------------------------#
[temperature_fan chamber]
pin: FILTER_FAN
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
cycle_time:0.01
off_below:0.1
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: CHAMBER_TEMPERATURE
min_temp: 0
max_temp: 70
target_temp: 50.0
control: watermark
gcode_id: C

#------------------------------#
#    circulation fan (bed fan) #
#------------------------------#

# see bellow Ellis bedfan section
#[fan_generic circulation]
#pin: EXHAUST_FAN

#------------------------------#
#     nevermore inner filter   #
#------------------------------#

[fan_generic filter]
pin: PART_FAN
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 75.0


#-------------------------------#
#     rpi cooling fan           #
#-------------------------------#

[temperature_fan rpi_fan]
#pin: HOST_CONTROLLER_FAN
#kick_start_time: 0.5
max_speed: 1
target_temp:50
#min_temp: 10
#max_temp: 95
#control: watermark
#sensor_type: temperature_host

#---------------------------------#
#     input shaper values         #
#---------------------------------#

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 65.8
shaper_type_y = mzv
shaper_freq_y = 41.6

#---------------------------------#
#     part cooling fan            #
#---------------------------------#

[fan]
pin: toolhead:E_FAN

#---------------------------------#
#      hotend fan                 #
#---------------------------------#

[heater_fan hotend_fan]
pin: toolhead:PART_FAN

#---------------------------------#
#          bed mesh size          #
#---------------------------------#

[bed_mesh]
# FOLLOW THE FORUMULA FOR relative_reference_index to be centered, 
# This is only for manual call of BED_MESH_CABLIBRATE all those parameters are overridden on the fly if using the adaptive bed mesh macro
# for example:
# [(9x9)-1] / 2 = 40
# [(7x7)-1] / 2 = 24
# [(5x5)-1] / 2 = 12
probe_count = 5, 5
relative_reference_index: 12

#---------------------------------#
#       dry filament macro        #
#---------------------------------#
; An idea for using the heated bed of a 3D printer as a filament dryer.
; Adds GCODE command: START_DRYER TIME=T TEMPERATURE=C CHAMBER=C
; (T is time in seconds, C is temperature in Celsuis)
; To stop drying early, use STOP_DRYER.
; Also defined some utility macros: DRY_PLA, DRY_PETG and DRY_ABS.
; Edit these with your own preferred defaults.

[gcode_macro _START_DRYER]
#variable_time: 14400
#variable_temperature: 50.0
#variable_chamber: 25.0

gcode:
    {% set dry_time = params.DRYTIME|default(14400) %}
    {% set dry_temperature = params.TEMPERATURE|default(50) %}
    {% set dry_chamber = params.CHAMBER|default(25) %}
    ; turn the heaters on, however you do that.
    M190 S{dry_temperature} ; Sets the print bed temperature without waiting.
#    M141 S{CHAMBER}     ; [OPTIONAL] Sets the enclosure temperature.
    ; then finally,

    SET_GCODE_VARIABLE MACRO=_DRYER_STATUS VARIABLE=time_remaining VALUE={dry_time}
    SET_GCODE_VARIABLE MACRO=_DRYER_STATUS VARIABLE=bed_temperature VALUE={dry_temperature}
#    SET_GCODE_VARIABLE MACRO=_DRYER_STATUS VARIABLE=chamber_temperature VALUE={dry_chamber}
    UPDATE_DELAYED_GCODE ID=_DRYER_TIMER DURATION=1
    SET_IDLE_TIMEOUT 

[gcode_macro STOP_DRYER]
gcode:
    ; Turn off heaters etc. here
    M190 S0 ; Disable bed heater
#    M141 S0 ; [OPTIONAL] Disable enclosure heater/fan
    SET_GCODE_VARIABLE MACRO=_DRYER_STATUS VARIABLE=time_remaining VALUE=0
    UPDATE_DELAYED_GCODE ID=_DRYER_TIMER DURATION=0    ; Stop the timer.
    RESPOND MSG="Drying Stopped"

[gcode_macro _DRYER_STATUS]
variable_time_remaining: 0
variable_bed_temperature: 0
variable_chamber_temperature: 0
gcode:
    {% if time_remaining > 0 %}
        M190 S{bed_temperature} ; Reset bed temperature (prevents timeout)
#        M141 S{chamber_temperature} ; [OPTIONAL] reset chamber temperature
        SET_GCODE_VARIABLE MACRO=_DRYER_STATUS VARIABLE=time_remaining VALUE={time_remaining - 1}

        {% if (time_remaining % 600 == 0) or (300 <= time_remaining <= 1800 and time_remaining % 300 == 0) or time_remaining < 60 %}
            RESPOND MSG="Drying, {time_remaining|int/60}min left..."
        {% endif %}

    {% else %}
        STOP_DRYER
    {% endif %}

[delayed_gcode _DRYER_TIMER]
gcode:
    UPDATE_DELAYED_GCODE ID=_DRYER_TIMER DURATION=1
    _DRYER_STATUS

[gcode_macro DRY_PLA]
gcode:
    _START_DRYER TEMPERATURE=50 CHAMBER=25 DRYTIME=14400 ; 4 hours

[gcode_macro DRY_PETG]
gcode:
    _START_DRYER TEMPERATURE=55  CHAMBER=30 DRYTIME=18000 ; 5 hours

[gcode_macro DRY_ABS]
gcode:
    _START_DRYER TEMPERATURE=65 CHAMBER=40 DRYTIME=14400 ; 4 hours

[gcode_macro DRY_PAHT]
gcode:
    _START_DRYER TEMPERATURE=80 CHAMBER=40 DRYTIME=28800 ; 8 hours


# -----------Orca Slicer ---------#
#                                 #
#---------------------------------#

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1

#---------------------------------#
#    Ellis BedFan control macros  #
#---------------------------------#
############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.6		# Fan speed once bed temp is reached  
variable_slow: 0.2		# Fan speed while bed is heating
gcode:

########## Bed Fans #########

[fan_generic BedFans]
pin: EXHAUST_FAN
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}
