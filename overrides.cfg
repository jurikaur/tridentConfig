############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------

# [include macros/calibration/test_speed.cfg]

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
# [gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "action1", "action2", ...
# gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
### Phaetus Dragon HF
# [extruder]
# control: pid
# pid_kp: 31.550
# pid_ki: 2.446
# pid_kd: 101.74

### Mosquito Magnum
[extruder]
control: pid
pid_Kp=24.644
pid_Ki=1.507
pid_Kd=100.732

[heater_bed]
control: pid
pid_kp: 54.017
pid_ki: 2.484
pid_kd: 293.719


#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z]
dir_pin: !Z_DIR

[stepper_z1]
dir_pin: !Z1_DIR

[stepper_z2]
dir_pin: !Z2_DIR

#-------------------------#
#   XY SENSORLESS         #
#-------------------------#

[tmc2209 stepper_x]
driver_SGTHRS: 140
#run_current: 0.85

[tmc2209 stepper_y]
driver_SGTHRS: 140
#run_current: 0.85


#-------------------------#
#   Extruder config       #
#-------------------------#

[extruder]
# microsteps: 32
# full_steps_per_rotation: 200
dir_pin: toolhead:E_DIR
# rotation_distance: 34.9364052589266  # Re-calibrate your own value
# gear_ratio: 44:10, 37:17
# rotation_distance: 4.637 #if gearratio 7.5:1 enabled rotation_distance: 34.96298
nozzle_diameter: 0.400                              #define nozzle diameter
# filament_diameter: 1.750
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
# pressure_advance: 0.03                         #to be calibrated
# pressure_advance_smooth_time: 0.03  #to be calibrated
### tavaline thermistor
#sensor_pin: toolhead:E_TEMPERATURE
max_temp: 330

sensor_type:MAX31865
sensor_pin: toolhead: MCU_SPI1_CS
spi_bus: spi1
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

[tmc2209 extruder]
run_current: 0.55
### Orbiter2.0 motor settings###
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

#-------------------------------#
#   tap probe parameters        #
#-------------------------------#

[probe]
pin: toolhead:X_STOP
#z_offset: -1.070
#z_offset: -1.100 #kuni 13.09(printerit sai tõstetud)
#z_offset: -1.130 #eelmine väärtuskuni 31.08.2023
z_offset: -1.170
#z_offset: -1.420 muudetud varem
speed: 5
sample_retract_dist: 1.0
samples_tolerance: 0.006
lift_speed: 5

#[settling_probe]
#settling_sample: True

#-------------------------------#
#        z-tilt parameters          #
#-------------------------------#

[z_tilt]
points:
   10, 10
   150, 290
   290, 10
speed: 200
horizontal_move_z: 10
retries: 10

#-------------------------------#
#   printer parameters          #
#-------------------------------#

[printer]
max_velocity: 300
max_accel: 10000
max_z_velocity: 10
max_z_accel: 250

#-------------------------------#
#    Chamber temperature fan    #
#-------------------------------#
[temperature_fan chamber_fan]
pin: FILTER_FAN
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
cycle_time:0.01
off_below:0.1
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: CHAMBER_TEMPERATURE
min_temp: 0
max_temp: 70
target_temp: 50.0
control: watermark
gcode_id: C

#------------------------------#
#    circulation fan (bed fan) #
#------------------------------#

# see bellow Ellis bedfan section
#[fan_generic circulation]
#pin: EXHAUST_FAN

#------------------------------#
#     nevermore inner filter   #
#------------------------------#

[fan_generic filter]
pin: PART_FAN
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 75.0


#-------------------------------#
#     rpi cooling fan           #
#-------------------------------#

[temperature_fan rpi_fan]
#pin: HOST_CONTROLLER_FAN
#kick_start_time: 0.5
max_speed: 1
target_temp:50
#min_temp: 10
#max_temp: 95
#control: watermark
#sensor_type: temperature_host

#---------------------------------#
#     input shaper axes mapping   #
#---------------------------------#

[adxl345]
axes_map: x,z,y

#---------------------------------#
#     input shaper values         #
#---------------------------------#

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 66.6
shaper_type_y = mzv
shaper_freq_y = 43.2

#---------------------------------#
#     part cooling fan            #
#---------------------------------#

[fan]
pin: toolhead:E_FAN

#---------------------------------#
#      hotend fan                 #
#---------------------------------#

[heater_fan hotend_fan]
pin: toolhead:PART_FAN

#---------------------------------#
#          bed mesh size          #
#---------------------------------#

[bed_mesh]
# FOLLOW THE FORUMULA FOR relative_reference_index to be centered, 
# This is only for manual call of BED_MESH_CABLIBRATE all those parameters are overridden on the fly if using the adaptive bed mesh macro
# for example:
# [(9x9)-1] / 2 = 40
# [(7x7)-1] / 2 = 24
# [(5x5)-1] / 2 = 12
probe_count = 5, 5
relative_reference_index: 12

# -----------Orca Slicer ---------#
#                                 #
#---------------------------------#

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1

#---------------------------------#
#    Ellis BedFan control macros  #
#---------------------------------#
############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.6		# Fan speed once bed temp is reached  
variable_slow: 0.2		# Fan speed while bed is heating
gcode:

########## Bed Fans #########

[fan_generic BedFans]
pin: EXHAUST_FAN
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}

#------------------------------------#
#  Custom Start_print macro with     #
#  chamber teperature fan target     #
#------------------------------------#

[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Extruder temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Bed temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the ERCF initialization)
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh

    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set klippain_ercf_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_ercf_enabled %}
    {% set ercf_reset_stats_on_start_print = printer["gcode_macro _USER_VARIABLES"].ercf_reset_stats_on_start_print %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}

    # set Chamber temperature fan target
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={CHAMBER_TEMP}

    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_start_print}
    {% endif %}

    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    {% if klippain_ercf_enabled %}
        {% if printer.ercf.enabled %}
            {% if ercf_reset_stats_on_start_print %}
                ERCF_RESET_STATS
            {% endif %}
        {% endif %}
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Material parameters
    {% if firmware_retraction_enabled %}
        SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}

    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "bed_soak" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "chamber_soak" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "tilt_calib" %}
            _MODULE_TILTING
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "purge" %}
            _MODULE_PURGE
        {% elif action == "clean" %}
            _MODULE_CLEAN
        {% elif action == "z_offset" %}
            _MODULE_Z_CALIB
        {% elif action == "bedmesh" %}
            _MODULE_BED_MESH
        {% elif action == "primeline" %}
            _MODULE_PRIMELINE
        {% elif action == "extruder_preheating" %}
            _MODULE_EXTRUDER_PREHEATING
        {% elif action == "custom1" %}
            _MODULE_CUSTOM1
        {% elif action == "custom2" %}
            _MODULE_CUSTOM2
        {% elif action == "custom3" %}
            _MODULE_CUSTOM3
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}

    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material from the slicer, etc...
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    # And.... Goooo!
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}

    G92 E0.0
